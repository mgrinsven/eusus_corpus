Attribute VB_Name = "function_module"Option ExplicitFunction PAJ_RAND(RNSeed)    If Not (IsEmpty(RNSeed)) Then        PAJ_RAND = Rnd(RNSeed)    Else        PAJ_RAND = Rnd    End IfEnd FunctionFunction PAJ_SimNORM(rand_number, mu, sigma)    On Error GoTo error1    Const epsf = 1 / 1000    If sigma < 0 Then GoTo error1    If rand_number < Application.NormSDist(-6) Then        PAJ_SimNORM = mu - 6 * sigma    ElseIf rand_number > 1 - Application.NormSDist(-6) Then        PAJ_SimNORM = mu + 6 * sigma    Else        If sigma < epsf Then            PAJ_SimNORM = mu        Else            PAJ_SimNORM = Application.NormInv(rand_number, mu, sigma)        End If    End If            Exit Functionerror1:    PAJ_SimNORM = "***"End FunctionFunction PAJ_AVERAGE(avg_range As Range, period)    Dim mysum As Single, k As Integer, n_range As Integer, I_Count As Integer        On Error GoTo error1    PAJ_AVERAGE = "***"    period = CInt(period)    If avg_range.Rows.Count > avg_range.Columns.Count Then        n_range = avg_range.Rows.Count    Else        n_range = avg_range.Columns.Count    End If    If period > n_range Then Exit Function    If period < 1 Then Exit Function    mysum = 0    I_Count = 0    For k = 0 To period - 1            If IsNumeric(avg_range(n_range - k)) And Not IsEmpty(avg_range(n_range - k)) Then            mysum = mysum + avg_range(n_range - k)            I_Count = I_Count + 1        End If    Next    If I_Count > 0 Then        PAJ_AVERAGE = mysum / I_Count    End If    Exit Functionerror1:    End FunctionFunction PAJ_REG_A(avg_range As Range, period)    Dim sumy As Single, sumx As Single, sumx2 As Single, sumxy As Single, k As Integer, n As Integer    Dim a As Single, b As Single, x As Single, y As Single, n_range As Integer    On Error GoTo error1    PAJ_REG_A = "***"    period = CInt(period)    If avg_range.Rows.Count > avg_range.Columns.Count Then        n_range = avg_range.Rows.Count    Else        n_range = avg_range.Columns.Count    End If    If period > n_range Then Exit Function    If period < 1 Then Exit Function    sumy = 0    sumxy = 0    sumx = 0    sumx2 = 0    n = 0    For k = 0 To period - 1        If IsNumeric(avg_range(n_range - k)) And Not IsEmpty(avg_range(n_range - k)) Then            y = avg_range(n_range - k)            x = -k            sumy = sumy + y            sumx = sumx + x            sumxy = sumxy + x * y            sumx2 = sumx2 + x ^ 2            n = n + 1        End If    Next    If n >= 2 Then        b = (sumxy - (sumy * sumx / n)) / (sumx2 - (((sumx) ^ 2) / n))        a = (sumy - b * sumx) / n        PAJ_REG_A = a    End If    Exit Functionerror1:        End FunctionFunction PAJ_REG_B(avg_range As Range, period)    Dim sumy As Single, sumx As Single, sumx2 As Single, sumxy As Single, k As Integer, n As Integer    Dim n_range As Integer, a As Single, b As Single, x As Single, y As Single    On Error GoTo error1    PAJ_REG_B = "***"    period = CInt(period)    If avg_range.Rows.Count > avg_range.Columns.Count Then        n_range = avg_range.Rows.Count    Else        n_range = avg_range.Columns.Count    End If    If period > n_range Then Exit Function    If period < 1 Then Exit Function    sumy = 0    sumxy = 0    sumx = 0    sumx2 = 0    n = 0    For k = 0 To period - 1        If IsNumeric(avg_range(n_range - k)) And Not IsEmpty(avg_range(n_range - k)) Then            y = avg_range(n_range - k)            x = -k            sumy = sumy + y            sumx = sumx + x            sumxy = sumxy + x * y            sumx2 = sumx2 + x ^ 2            n = n + 1        End If    Next    If n >= 2 Then        b = (sumxy - (sumy * sumx / n)) / (sumx2 - (((sumx) ^ 2) / n))        PAJ_REG_B = b    End If    Exit Functionerror1:        End FunctionFunction PAJ_LINEAR(a As Range, b As Range, period)    Dim na_range As Integer, nb_range As Integer    On Error GoTo error1    PAJ_LINEAR = "***"    period = CInt(period)    If a.Rows.Count > a.Columns.Count Then na_range = a.Rows.Count Else na_range = a.Columns.Count    If b.Rows.Count > b.Columns.Count Then nb_range = b.Rows.Count Else nb_range = b.Columns.Count    If period > na_range Or period > nb_range Then Exit Function    If period < 0 Then Exit Function    If IsNumeric(a(na_range - period)) And Not IsEmpty(a(na_range - period)) And IsNumeric(b(nb_range - period)) And Not IsEmpty(b(nb_range - period)) Then        PAJ_LINEAR = a(na_range - period) + b(nb_range - period) * period    End If    Exit Functionerror1:    End FunctionFunction PAJ_MAD(data_range) 'Returns the mean averaage deviation of rows or columnns of data.    Dim mysum As Single, k As Integer, n_range As Integer, I_Count As Integer, a As Object    On Error GoTo error1    PAJ_MAD = "***"    mysum = 0    I_Count = 0    If data_range.Rows.Count > data_range.Columns.Count Then        n_range = data_range.Rows.Count        If data_range.Columns.Count <> 1 Then Exit Function    Else        n_range = data_range.Columns.Count        If data_range.Rows.Count <> 1 Then Exit Function    End If    If n_range > 0 Then        For Each a In data_range            If IsNumeric(a) And Not IsEmpty(a) Then                mysum = mysum + Abs(a)                I_Count = I_Count + 1            End If        Next    End If    If I_Count > 0 Then        PAJ_MAD = mysum / I_Count    End If    Exit Functionerror1:    End FunctionFunction PAJ_SUMPRODUCT(range1 As Range, range2 As Range, interval1, interval2, start1, start2)' Returns the sum product of rows of columnar data.    Dim mysum As Single, k As Integer, n_range As Integer, I_Count As Integer    Dim myvalue As Variant, myunit As Variant, value_start As Range, unit_start As Range    Dim nn_add1 As Integer, nn_add2 As Integer, int1 As Integer, int2 As Integer, nn_add As Integer    On Error GoTo error1    PAJ_SUMPRODUCT = "***"    int1 = CInt(interval1): int2 = CInt(interval2)    If int1 < 1 Or int2 < 1 Then Exit Function    nn_add1 = Application.RoundUp(range1.Columns.Count / int1, 0)    nn_add2 = Application.RoundUp(range2.Columns.Count / int2, 0)    nn_add = Application.Min(nn_add1, nn_add2)    If nn_add < 1 Then Exit Function    mysum = 0    I_Count = 0    Set value_start = range1(start1)    Set unit_start = range2(start2)    For k = 1 To nn_add        myvalue = value_start.Offset(0, int1 * (k - 1))        myunit = unit_start.Offset(0, int2 * (k - 1))        If IsNumeric(myvalue) And IsNumeric(myunit) Then            mysum = mysum + myvalue * myunit            I_Count = I_Count + 1        End If    Next    If I_Count > 0 Then        PAJ_SUMPRODUCT = mysum    End If    Exit Functionerror1:                End FunctionFunction PAJ_checkrange(range_name)'This is a boolean function returns true if there is a range with the name range_name.'Otherwise returns false.    Dim x As Integer         On Error GoTo setfalse     x = Range(range_name).Count     If x > 0 Then PAJ_checkrange = True Else PAJ_checkrange = False     Exit Functionsetfalse:     PAJ_checkrange = FalseEnd FunctionFunction PAJ_findname(my_prefix)    Dim RR_Count As Integer, cc As Integer    Dim I_found_it As Boolean    Dim nme As Object    Dim x  As String    Dim z, y    RR_Count = 1    I_found_it = True    Do Until Not (I_found_it)        I_found_it = False        For Each nme In ActiveWorkbook.Names            If Not (PAJ_deletename(nme)) Then                x = nme.NameLocal                z = InStr(1, x, my_prefix, 1)                If z = 1 Then                    cc = Len(x) - 4                    If cc > 0 Then                        y = Val(right(x, cc))                        If CInt(y) = RR_Count Then                            I_found_it = True                            RR_Count = RR_Count + 1                            Exit For                        End If                    End If                End If            End If           Next nme    Loop    PAJ_findname = my_prefix & RR_CountEnd FunctionPrivate Function PAJ_deletename(nme)    Dim x As Integer    On Error GoTo idelete        x = Range(nme).Column        PAJ_deletename = False        Exit Functionidelete:        nme.Delete        PAJ_deletename = TrueEnd FunctionFunction PAJ_GCD(x1T, x2T)    'EuclideanÂ Algorithm to return greatest common divisor of two numbers    Dim x1 As Single, x2 As Single, r1 As Single, r2 As Single, _        r3 As Single, q3 As Single    Const eps = 1 / 1000    On Error GoTo ileave        PAJ_GCD = "***"        If x1T < x2T Then        x1 = x2T        x2 = x1T    Else        x1 = x1T        x2 = x2T    End If        If x1 < eps Or x2 < eps Then Exit Function        r1 = x1: r2 = x2    q3 = Int(r1 / r2): r3 = r1 - q3 * r2        Do Until r3 < eps        r1 = r2        r2 = r3        q3 = Int(r1 / r2): r3 = r1 - q3 * r2    Loop    PAJ_GCD = r2    Exit Function    ileave:End FunctionFunction PAJ_LCM(x1T, x2T)    'Algorithm to least common multiple of two numbers    Dim gcd As Single, r1 As Single, r2 As Single    On Error GoTo ileave        PAJ_LCM = "***"    gcd = PAJ_GCD(x1T, x2T)    PAJ_LCM = x1T * x2T / gcd    Exit Function    ileave:End Function