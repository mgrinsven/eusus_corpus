Attribute VB_Name = "Control"Option ExplicitSub PAJ_credits()'Displays credits for the programs including the date of the latest modification.    Dim Mssg As String, response As Integer    Mssg = "These are my add-ins " & Chr(13) _    & "by Me" & Chr(13) & "My Place" _    & Chr(13) & "Revision Date: Oct. 29, 2003" _    & Chr(13) & "Send trouble reports to myadress@my_email.edu" _    & Chr(13) & "Instructions on web at http://www.mysite"    response = MsgBox(Mssg, 0, "About Add-in")End SubSub PAJ_checkmenu()'This subroutine is called whenever the menu item "Do it Yourself" is selected. _When the menu item is unchecked it adds the calls PAJ_addmenuitems to add the subitems. _When the menu item is checked it calls PAJ_deletemenuitems to delete the subitems.    Dim newMethod As String    newMethod = "Do it Yourself"    With MenuBars(xlWorksheet).Menus("OR_MM").MenuItems(newMethod)    If .Checked Then        PAJ_deletemenuitems (newMethod)        .Checked = False    Else        PAJ_addmenuitems (newMethod)        .Checked = True    End If    End WithEnd SubSub PAJ_addmenuitems(newMethod)'The argument newMethod is the main menu item for which subitems are to be added. _This subroutine adds the menu subitems to the menu. _It is here you add the subitems and the links to the subroutines that are executed when the subitems are selected by the user.    Dim ProbNewItem As Object    Dim xindex As Integer, k As Integer    k = 1    With MenuBars(xlWorksheet).Menus("OR_MM").MenuItems        xindex = MenuBars(xlWorksheet).Menus("OR_MM").MenuItems(newMethod).Index        Set ProbNewItem = .Add(Caption:="_Test Colors/Borders", OnAction:="PAJ_testmakecolor", before:=xindex + k): k = k + 1        Set ProbNewItem = .Add(Caption:="_Test Buttons", OnAction:="PAJ_testbutton", before:=xindex + k): k = k + 1        Set ProbNewItem = .Add(Caption:="_Test", OnAction:="PAJ_test", before:=xindex + k): k = k + 1        Set ProbNewItem = .Add(Caption:="_Add Worksheet...", OnAction:="PAJ_testfindworksheet", before:=xindex + k): k = k + 1        Set ProbNewItem = .Add(Caption:="_Relink", OnAction:="PAJ_Relink", before:=xindex + k): k = k + 1        Set ProbNewItem = .Add(Caption:="_About Add-in", OnAction:="PAJ_credits", before:=xindex + k): k = k + 1    End WithEnd SubSub PAJ_deletemenuitems(newMethod)'The argument newMethod is the main menu item for which subitems are to be deleted. _This subroutine deletes the menu subitems from the menu.    Dim delete_more As Boolean    Dim rmenu As Object            'find items on OR_MM menu related to add-in and delete them    delete_more = False    For Each rmenu In MenuBars(xlWorksheet).Menus("OR_MM").MenuItems        If rmenu.Caption = newMethod Then            delete_more = True        Else            If delete_more Then                If Left(rmenu.Caption, 1) = "_" Then                    rmenu.Delete                Else                    delete_more = False: Exit For                End If            End If        End If    NextEnd SubSub PAJ_checkworksheet()'Checks if there is an open worksheet for the workbook.    Dim WS_Name As String    On Error GoTo myErrorMessage    WS_Name = ActiveSheet.Name    Exit SubmyErrorMessage:    MsgBox ("A worksheet must be open for the add-in to work")    EndEnd SubSub PAJ_checkname(my_name, response)'Checks a proposed name to see if it is already used.    Dim x As Integer    Dim nme As Object    response = 0    If Len(my_name) > 0 Then        x = Asc(Left(my_name, 1))        If (((x > 64) And (x < 91)) Or ((x > 96) And (x < 123)) Or (x = 95)) _        And (InStr(1, my_name, Chr(32)) = 0) Then            For Each nme In ActiveWorkbook.Names                If my_name = nme.NameLocal Then                    response = MsgBox("This name is already used. Do you want to redefine it?", vbOKCancel)                    If response > 0 Then Exit For                End If            Next nme        Else            MsgBox ("This name is not allowed.")            response = vbCancel        End If    Else        MsgBox ("No name defined.")        response = vbCancel    End If            End SubSub PAJ_findworksheet(ws, I_OK)    On Error GoTo makefalse    Dim nwks As Object, xNew As Boolean, currentbook As Object'Find the worksheet named ws.  If it is not found, call the subroutine that creates it.    Set currentbook = Application.ActiveWorkbook    Cells(1, 1).Name = ws    ActiveWorkbook.Names(ws).Delete    xNew = True    For Each nwks In currentbook.Worksheets        If (nwks.Name = ws) Then xNew = False    Next nwks    If Not (xNew) Then Worksheets(ws).Delete        PAJ_addworksheet ws     I_OK = True    Exit Submakefalse:    MsgBox ("The operation was cancelled or the name " & ws & " is not allowed by Excel.")     I_OK = FalseEnd SubSub PAJ_addworksheet(ws)'Adds a worksheet named "ws" to the current workbook.    Dim currentbook As Object    Set currentbook = Application.ActiveWorkbook    currentbook.Worksheets.Add 'after:=currentBook.Worksheets(numsheets)    currentbook.ActiveSheet.Name = wsEnd SubSub PAJ_makecolor(aa, V_Color)'This subroutine colors a range. The argument aa is a worksheet range. _V_color is the index associated with the desired color.    With aa.Interior        .ColorIndex = V_Color        .Pattern = xlSolid        .PatternColorIndex = xlAutomatic    End WithEnd SubSub PAJ_makeborders(aa, Optional mythick, Optional mycolor)'Puts a grid border on a range. The argument aa is the range that is to be bordered. _The optional arguments are mythick, the border thickness, and mycolor, the border color.    If IsMissing(mythick) Then mythick = xlThin    If IsMissing(mycolor) Then mycolor = 0    With aa        .Borders(xlLeft).Weight = xlThin        .Borders(xlLeft).ColorIndex = mycolor        .Borders(xlRight).Weight = xlThin        .Borders(xlRight).ColorIndex = mycolor        .Borders(xlTop).Weight = xlThin        .Borders(xlTop).ColorIndex = mycolor        .Borders(xlBottom).Weight = xlThin        .Borders(xlBottom).ColorIndex = mycolor    End WithEnd SubSub PAJ_side_borders(aa, Optional mythick, Optional mycolor)'Puts left and right borders on a range. The argument aa is the range that is to be bordered. _The optional arguments are mythick, the border thickness, and mycolor, the border color.    If IsMissing(mythick) Then mythick = xlThick    If IsMissing(mycolor) Then mycolor = 0    With aa.Borders(xlEdgeRight)        .LineStyle = xlContinuous        .Weight = mythick        .ColorIndex = mycolor    End With    With aa.Borders(xlEdgeLeft)        .LineStyle = xlContinuous        .Weight = mythick        .ColorIndex = mycolor    End WithEnd SubSub PAJ_allborders(aa, Optional mythick, Optional mycolor)'Puts borders around a range. The argument aa is the range that is to be bordered. _The optional arguments are mythick, the border thickness, and mycolor, the border color.    If IsMissing(mythick) Then mythick = xlThick    If IsMissing(mycolor) Then mycolor = 0    With aa.Borders(xlEdgeRight)        .LineStyle = xlContinuous        .Weight = mythick        .ColorIndex = mycolor    End With    With aa.Borders(xlEdgeLeft)        .LineStyle = xlContinuous        .Weight = mythick        .ColorIndex = mycolor    End With    With aa.Borders(xlEdgeTop)        .LineStyle = xlContinuous        .Weight = xlThick        .ColorIndex = mycolor    End With    With aa.Borders(xlEdgeBottom)        .LineStyle = xlContinuous        .Weight = xlThick        .ColorIndex = mycolor    End WithEnd SubSub PAJ_fixformulas()'When a workbook is opened with user defined functions that were created in another computer, _the functions will not work. This routine fixes the formula references to delete any leading paths _to the functions.    Dim z As Integer, cc As Integer, n_fun As Integer, k As Integer    Dim Pre As String, x As String, x3 As String    Dim cell As Object, fun, len_pre As Integer, len_test As Integer    'to make the replacement more selective, list the three letters starting each function        'fun = Array("RAN", "SIM", "AVE", "EXP", "CON", "REG", "LIN", "ERR", "MAD", "ADJ", "SUM")    'n_fun = UBound(fun)    Pre = "PAJ_"    len_pre = Len(Pre)    len_test = Len(Pre) + 3    On Error GoTo leavesub    For Each cell In ActiveSheet.Cells.SpecialCells(xlCellTypeFormulas)                    x = UCase(cell.Formula)        z = InStr(1, x, Pre, 1)        If z > 2 Then            cc = Len(x) - z + 1            x = right(x, cc)            newformula cell, x            'If cc > len_test Then           '    x3 = Left(x, len_test)           '     x3 = Right(x3, 3)           '     For k = 0 To n_fun           '         If x3 = fun(k) Then newformula cell, x: Exit For           '     Next            'End If        End If    Next cell     Exit Subleavesub:End SubPrivate Sub newformula(cell, x)'Private routine called by PAJ_fixformulas     On Error GoTo leavesub        cell.Formula = "=" & x    Exit Subleavesub:End SubSub PAJ_addbutton(my_loc, action, title)'Places a button on a worksheet in location my_loc. _When clicked the button will call the subroutine whose name is action. _The words placed adjacent to the button are in title.    Dim celltop As Integer, cellleft As Integer, buttonsize As Integer        With my_loc        celltop = .Top        cellleft = .Left        buttonsize = 1.4 * Cells(2, 1).Height        .Value = title        .Font.Bold = True        .HorizontalAlignment = xlLeft        .Font.ColorIndex = 3    End With    ActiveSheet.Buttons.Add(cellleft - buttonsize, celltop - 0.2 * buttonsize, buttonsize, buttonsize).Select    With Selection        .OnAction = action        .Characters.Text = ""        .Placement = xlMove        .PrintObject = False     End With End SubSub PAJ_checkempty(locate, down, right, response)'The argument locate is a cell at the upper left corner of a range to which material will be written. _The arguments down and right specify a rectangular array of cells that will be filled. _If the cells in the specifed range are not empty, the user is questioned if the cells should be written. _A response of no makes response equal to XLcancel.    Dim rr As Integer, cc As Integer, i As Integer, j As Integer        rr = locate.Row        cc = locate.Column        response = 0        For i = rr To rr + down - 1            For j = cc To cc + right - 1                If IsEmpty(Cells(i, j).Value) = False Then                    Range(Cells(rr, cc), Cells(rr + down - 1, cc + right - 1)).Select                    response = MsgBox("Information will be written over. Continue?", vbOKCancel)                End If                If response > 0 Then Exit For            Next            If response > 0 Then Exit For        Next        If response = vbOK Then Range(Cells(rr, cc), Cells(rr + down - 1, cc + right - 1)).Clear        Range(Columns(cc), Columns(cc + right - 1)).Hidden = FalseEnd SubSub PAJ_makeseries(cell_start As Range, s_length As Integer, s_horizontal As Boolean, _    s_prefix As String, s_first, Optional s_position, Optional cell_color, Optional border_color)'Makes a series in a row or column,cell_start is the starting cell, s_length is the length of the series's_horizontal is true if the series is horizontal, false if vertical's_prefix is the series prefix,,s_first is the first suffix in the series's_position must be xlcenter,xlleft or xlright, cell_color is the background color, border_color is the cell border color        Dim fill_range As Range, s_start As Range    Set s_start = Cells(cell_start.Row, cell_start.Column)    If s_length < 1 Then Exit Sub    With s_start        If s_horizontal Then            Set fill_range = Range(.Offset(0, 0), .Offset(0, s_length - 1))        Else            Set fill_range = Range(.Offset(0, 0), .Offset(s_length - 1, 0))        End If    End With    fill_range(1) = s_prefix & s_first    If s_length > 1 Then fill_range(2) = s_prefix & s_first + 1    fill_range.DataSeries Type:=xlAutoFill    fill_range.HorizontalAlignment = s_position    If Not IsMissing(cell_color) Then PAJ_makecolor fill_range, cell_color    If Not IsMissing(border_color) Then PAJ_makeborders fill_range, xlThin, border_colorEnd SubSub PAJ_makematrix(cell_start As Range, s_length As Integer, s_width As Integer, s_horizontal As Boolean, _     Optional cell_contents, Optional s_position, Optional cell_color, Optional border_color, Optional cell_format)'Makes a matix, cell_start is the starting cell, s_length is the length of the matrix, s_width is the width's_horizontal is true if the series is horizontal, false if vertical'cell_contents is the fill value which may be text or numeric's_position must be xlcenter,xlleft or xlright, cell_color is the background color, border_color is the cell border color        Dim fill_range As Range, s_start As Range    Set s_start = Cells(cell_start.Row, cell_start.Column)    If s_length < 1 Or s_width < 1 Then Exit Sub    With s_start        If s_horizontal Then            Set fill_range = Range(.Offset(0, 0), .Offset(s_width - 1, s_length - 1))        Else            Set fill_range = Range(.Offset(0, 0), .Offset(s_length - 1, s_width - 1))        End If    End With    If Not IsMissing(cell_contents) Then fill_range = cell_contents    If Not IsMissing(s_position) Then fill_range.HorizontalAlignment = s_position    If Not IsMissing(cell_color) Then PAJ_makecolor fill_range, cell_color    If Not IsMissing(border_color) Then PAJ_makeborders fill_range, xlThin, border_color    If Not IsMissing(cell_format) Then fill_range.NumberFormat = cell_formatEnd SubSub PAJ_chgmatrix(old_range As Range, rr, cc)'Changes the size of a matrix stored in old_range'RR and CC are the new numbers of rows and columns'when rows and columns are increased in number the current contents'of the matrix is not destroyed.    Dim rr_old As Integer, cc_old As Integer, k As Integer    Dim rrm As Integer, ccm As Integer    If rr < 1 Or cc < 1 Then Exit Sub        rr_old = old_range.Rows.Count    cc_old = old_range.Columns.Count    rrm = old_range.Row    ccm = old_range.Column        If rr > rr_old And rr_old > 1 Then        For k = 1 To rr - rr_old + 1            old_range.Rows(rr_old).Insert Shift:=xlDown        Next        Range(Cells(rrm + rr, ccm), Cells(rrm + rr, ccm + cc_old - 1)).Cut        'Selection.Cut        Range(Cells(rrm + rr_old - 1, ccm), Cells(rrm + rr_old - 1, ccm + cc_old - 1)).Select        ActiveSheet.Paste        old_range.Rows(rr).ClearContents            ElseIf rr < rr_old Then        For k = 1 To rr_old - rr            old_range.Rows(rr + 1).Delete Shift:=xlUp        Next    End If    If cc > cc_old And cc_old > 1 Then        For k = 1 To cc - cc_old + 1            old_range.Columns(cc_old).Insert Shift:=xlToRight        Next        Range(Cells(rrm, ccm + cc), Cells(rrm + rr_old - 1, ccm + cc)).Cut        'Selection.Cut        Range(Cells(rrm, ccm + cc_old - 1), Cells(rrm + rr_old - 1, ccm + cc_old - 1)).Select        ActiveSheet.Paste        old_range.Columns(cc).ClearContents        ElseIf cc < cc_old Then        For k = 1 To cc_old - cc            old_range.Columns(cc + 1).Delete Shift:=xlToLeft        Next    End If    End Sub