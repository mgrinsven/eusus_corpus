Attribute VB_Name = "rockProps"Option Explicit 'force variable type checkingSub HackerandAbers03()'Const noPhases = 52Dim press As Double, dvol As Double, zeta As Double, coef2 As Double, ff As DoubleDim rho298 As Double, a0 As Double, G As Double, dudP As Double, dudT As DoubleDim lnRhoOverRhoT As Double, Kt As Double, gth As DoubleDim alphaPT As Double, alphaT As Double, deltaT As Double, f As Double, ffac As DoubleDim fguess As Double, fguess2 As Double, KtPT As Double, rhoPT As DoubleDim rhoT As Double, GT As Double, GPT As Double, GPTmax As Double, GPTmin As DoubleDim KsPT As Double, KsPTmax As Double, KsPTmin As Double, VpPT As DoubleDim VsPT As Double, Poissons As Double, a As Double, b As Double, c As Double, d As DoubleDim e As Double, fa As Double, fb As Double, fc As Double, f1 As Double, f2 As DoubleDim min As Double, min1 As Double, min2 As Double, pzbrent As Double, q As DoubleDim r As Double, s As Double, tol1 As Double, tolout As Double, xm As Double, zbrent As DoubleDim iter As Integer, rLoop As Integer, cloop As Integer, rockCLoop As IntegerDim labelrow As Integer, volRow As Integer, dataTest As IntegerDim temperature As Integer, rho298column As Integer, H2Ocolumn As IntegerDim a0column As Integer, dKtdPcolumn As Integer, deltaTcolumn As IntegerDim Ktcolumn As Integer, ucolumn As Integer, dudTcolumn As IntegerDim dudPcolumn As Integer, rhoTcolumn As Integer, gthcolumn As Integer, noRocks As IntegerDim KtT As Double, dKtdP As Double, rKModes(100) As Double, modeTotal As DoubleDim mineralname(100) As String, temp As StringDim alpha1 As Double, alphan As Double, beta1 As Double, betan As Double, A1 As DoubleDim An As Double, B1 As Double, Bn As Double, aA1 As Double, bB1 As Double, aAn As DoubleDim bBn As Double, kHSMin As Double, kHSMax As Double, GHSMin As Double, GHSMax As DoubleDim rkVpVoigt As Double, rkVpReuss As Double, rkVsVoigt As Double, rkVsReuss As DoubleDim rkKVoigt As Double, rkKReuss As Double, rkGVoigt As Double, rkGReuss As DoubleDim rkH2O As Double, rkKHS As Double, rkGHS As Double, rkVpHS As Double, rkVsHS As DoubleDim rkVx As Double, rkVpMax As Double, rkVpMin As Double, rkVsMax As DoubleDim rkVsMin As Double, rkRho As Double, rkPoissonsVRH As Double, rkPoissonsHS As DoubleDim rkVpVR As Double, rkVsVR As Double, rkKVR As Double, rkGVR As Double, noPhases As DoubleDim storedValues(100, 20) As DoubleDim rng'contents of "storedValues" array are as follows:'1='2=alpha(T)'3=rho(T)'4=KT(T)'5=u(T)'6=f, finite strain'7=KT(P,T)'8=alpha(P,T)'9=KS(P,T)'10=G(P,t)'11=rho(P,T)'12=Vphi'13=Vp'14=Vs'15=Poissons'16=H2O'do housekeepingApplication.Calculation = xlCalculationManualApplication.ScreenUpdating = FalseApplication.StatusBar = "Running macro..."'find header row in "rocks" sheet'Sheets("rocks").SelectFor rLoop = 1 To 10    If Sheets("rocks").Cells(rLoop, 1) = "vol%" Then volRow = rLoopNext rLoopApplication.StatusBar = "Locating data in mineral database..."'Sheets("database").SelectWith Sheets("database")'find where data rows are located in mineral database    For rLoop = 1 To 10        If Sheets("database").Cells(rLoop, 1) = "phase" Then labelrow = rLoop    Next rLoop'find where data columns are located in mineral database    dataTest = 0    For cloop = 1 To 30        If Sheets("database").Cells(labelrow, cloop) = "r298" Then            rho298column = cloop            dataTest = dataTest + 1         End If        If Sheets("database").Cells(labelrow, cloop) = "H2O" Then            H2Ocolumn = cloop            dataTest = dataTest + 1         End If        If Sheets("database").Cells(labelrow, cloop) = "a0" Then            a0column = cloop            dataTest = dataTest + 1         End If        If Sheets("database").Cells(labelrow, cloop) = "KT" Then            Ktcolumn = cloop            dataTest = dataTest + 1         End If        If Sheets("database").Cells(labelrow, cloop) = "KT prime" Then            dKtdPcolumn = cloop            dataTest = dataTest + 1         End If        If Sheets("database").Cells(labelrow, cloop) = "G" Then            ucolumn = cloop            dataTest = dataTest + 1         End If        If Sheets("database").Cells(labelrow, cloop) = "gamma" Then            dudTcolumn = cloop            dataTest = dataTest + 1         End If        If Sheets("database").Cells(labelrow, cloop) = "G prime" Then            dudPcolumn = cloop            dataTest = dataTest + 1         End If        If Sheets("database").Cells(labelrow, cloop) = "gth" Then            gthcolumn = cloop            dataTest = dataTest + 1         End If        If Sheets("database").Cells(labelrow, cloop) = "dT" Then            deltaTcolumn = cloop            dataTest = dataTest + 1         End If    Next cloop    If dataTest <> 10 Then        temp = Application.InputBox("There is a problem in the format of the database", , , , , , , 1)        GoTo 666     'not all data were found, stop    End IfEnd With'find header row in "database" sheetFor rLoop = 1 To 10    If Sheets("database").Cells(rLoop, 1) = "phase" Then labelrow = rLoopNext rLoop'figure out how many minerals are in databaseFor rLoop = 50 To 200    If Sheets("database").Cells(rLoop, 1) = "END" Then noPhases = rLoop - 5Next rLoopFor rLoop = 1 To noPhases    mineralname(rLoop) = Sheets("database").Cells(labelrow + rLoop, 1)Next rLoop'setup mineral properties sheet labelsApplication.StatusBar = "Setting up mineral properties sheet..."'Sheets("minerals").Select    Sheets("minerals").Cells(1, 1) = "P(GPa)"    Sheets("minerals").Cells(1, 2) = press / 1000000000    Sheets("minerals").Cells(2, 1) = "T(°C)"    Sheets("minerals").Cells(2, 2) = temperature    Sheets("minerals").Cells(4, 1) = "phase"    Sheets("minerals").Cells(3, 2) = "alpha(T,0)"    Sheets("minerals").Cells(4, 2) = "1/K"    Sheets("minerals").Cells(3, 3) = "rho(T,0)"    Sheets("minerals").Cells(4, 3) = "kg/m3"    Sheets("minerals").Cells(3, 4) = "Kt(T,0)"    Sheets("minerals").Cells(4, 4) = "Pa"    Sheets("minerals").Cells(3, 5) = "G(T,0)"    Sheets("minerals").Cells(4, 5) = "Pa"    Sheets("minerals").Cells(3, 6) = "finite"    Sheets("minerals").Cells(4, 6) = "strain"    Sheets("minerals").Cells(3, 7) = "Kt(T,P)"    Sheets("minerals").Cells(4, 7) = "Pa"    Sheets("minerals").Cells(3, 8) = "alpha(T,P)"    Sheets("minerals").Cells(4, 8) = "1/K"    Sheets("minerals").Cells(3, 9) = "Ks(T,P)"    Sheets("minerals").Cells(4, 9) = "Pa"    Sheets("minerals").Cells(3, 10) = "G(T,P)"    Sheets("minerals").Cells(4, 10) = "Pa"    Sheets("minerals").Cells(3, 11) = "rho(T,P)"    Sheets("minerals").Cells(4, 11) = "kg/m3"    Sheets("minerals").Cells(3, 12) = "V bulk"    Sheets("minerals").Cells(4, 12) = "km/s"    Sheets("minerals").Cells(3, 13) = "Vp"    Sheets("minerals").Cells(4, 13) = "km/s"    Sheets("minerals").Cells(3, 14) = "Vs"    Sheets("minerals").Cells(4, 14) = "km/s"    Sheets("minerals").Cells(3, 15) = "Poisson's"    Sheets("minerals").Cells(4, 15) = "ratio"'find pressure row'Sheets("rocks").Select    Sheets("rocks").Cells(noPhases + 7 + 0, 1) = "P (GPa)"    Sheets("rocks").Cells(noPhases + 7 + 1, 1) = "T (°C)"    Sheets("rocks").Cells(noPhases + 7 + 3, 1) = "H2O (wt%)"    Sheets("rocks").Cells(noPhases + 7 + 4, 1) = "rho (g/cm3)"    Sheets("rocks").Cells(noPhases + 7 + 5, 1) = "Vp (km/s)"    Sheets("rocks").Cells(noPhases + 7 + 6, 1) = "Vs (km/s)"    Sheets("rocks").Cells(noPhases + 7 + 7, 1) = "K (GPa)"    Sheets("rocks").Cells(noPhases + 7 + 8, 1) = "G (GPa)"    Sheets("rocks").Cells(noPhases + 7 + 9, 1) = "Poissons"    Sheets("rocks").Cells(noPhases + 7 + 18, 1) = "Vp H-S max"    Sheets("rocks").Cells(noPhases + 7 + 19, 1) = "Vp H-S min"    Sheets("rocks").Cells(noPhases + 7 + 20, 1) = "Vp Voigt"    Sheets("rocks").Cells(noPhases + 7 + 21, 1) = "Vp Reuss"    Sheets("rocks").Cells(noPhases + 7 + 22, 1) = "Vp VRH"    Sheets("rocks").Cells(noPhases + 7 + 23, 1) = "Vs H-S max"    Sheets("rocks").Cells(noPhases + 7 + 24, 1) = "Vs H-S min"    Sheets("rocks").Cells(noPhases + 7 + 25, 1) = "Vs Voigt"    Sheets("rocks").Cells(noPhases + 7 + 26, 1) = "Vs Reuss"    Sheets("rocks").Cells(noPhases + 7 + 27, 1) = "Vs VRH"    Sheets("rocks").Cells(noPhases + 7 + 28, 1) = "K H-S max"    Sheets("rocks").Cells(noPhases + 7 + 29, 1) = "K H-S min"    Sheets("rocks").Cells(noPhases + 7 + 30, 1) = "K Voigt"    Sheets("rocks").Cells(noPhases + 7 + 31, 1) = "K Reuss"    Sheets("rocks").Cells(noPhases + 7 + 32, 1) = "K VRH"    Sheets("rocks").Cells(noPhases + 7 + 33, 1) = "G H-S max"    Sheets("rocks").Cells(noPhases + 7 + 34, 1) = "G H-S min"    Sheets("rocks").Cells(noPhases + 7 + 35, 1) = "G Voigt"    Sheets("rocks").Cells(noPhases + 7 + 36, 1) = "G Reuss"    Sheets("rocks").Cells(noPhases + 7 + 37, 1) = "G VRH"'figure out number of rocks, Pressures, and Temperatures specified by usernoRocks = 0For rockCLoop = 2 To 4234    If (IsEmpty(Sheets("rocks").Cells(noPhases + 7, rockCLoop)) Or IsEmpty(Sheets("rocks").Cells(noPhases + 7 + 1, rockCLoop))) Then GoTo 444'add missing SUMs, if any:If (IsEmpty(Sheets("rocks").Cells(noPhases + 5, rockCLoop))) Then Sheets("rocks").Cells(noPhases + 5, rockCLoop).Formula = "=SUM(" & Chr(rockCLoop + 64) & "5:" & Chr(rockCLoop + 64) & noPhases + 4 & ")"    noRocks = noRocks + 1Next rockCLoop444 'finished checking number of rocks'loop through rocks, Pressures, and Temperatures specified by userIf noRocks = 0 Then    InputBox ("There are no valid columns in the rock database. Check to make sure that each column has a P, a T, and one or more minerals.")    GoTo 666End IfFor rockCLoop = 2 To 1 + noRocksApplication.StatusBar = "Calculating properties for rock " & rockCLoop - 1 & "/" & noRocks & "."    press = Sheets("rocks").Cells(noPhases + 7, rockCLoop)    press = press * 1000000000  'convert GPa to Pa    temperature = Sheets("rocks").Cells(noPhases + 7 + 1, rockCLoop)    If ((temperature = 0) And (press = 0)) Then GoTo 666    If (Sheets("rocks").Cells(noPhases + 5, rockCLoop) <= 0) Then GoTo 555 ' skip this rock if nothing in it'loop through all rows'    Sheets("database").Select    For rLoop = 1 To noPhases'read mineral values        storedValues(rLoop, 16) = Sheets("database").Cells(labelrow + rLoop, H2Ocolumn)    'H2O content        rho298 = Sheets("database").Cells(labelrow + rLoop, rho298column)  'density at STP        a0 = Sheets("database").Cells(labelrow + rLoop, a0column)  'thermal expansivity        Kt = Sheets("database").Cells(labelrow + rLoop, Ktcolumn)  'bulk modulus at STP        dKtdP = Sheets("database").Cells(labelrow + rLoop, dKtdPcolumn)    'K prime at STP        deltaT = Sheets("database").Cells(labelrow + rLoop, deltaTcolumn)  '2nd Gruneisen        G = Sheets("database").Cells(labelrow + rLoop, ucolumn)    'shear modulus at STP        dudT = Sheets("database").Cells(labelrow + rLoop, dudTcolumn)  'G prime at STP        dudP = Sheets("database").Cells(labelrow + rLoop, dudPcolumn)  'du/dP        gth = Sheets("database").Cells(labelrow + rLoop, gthcolumn)    'first Gruneisen'calculate mineral values        alphaT = a0 - 10 * a0 / Sqr(temperature + 273)  'expansivity at temperature        storedValues(rLoop, 2) = alphaT        If temperature < 25 Then temperature = 25        lnRhoOverRhoT = a0 * (temperature - 25) - 20 * a0 * (Sqr(temperature + 273) - Sqr(298))        rhoT = rho298 * Exp(-lnRhoOverRhoT) 'density at temperature        storedValues(rLoop, 3) = rhoT        KtT = Kt * Exp(-deltaT * lnRhoOverRhoT) 'bulk modulus at temperature        storedValues(rLoop, 4) = KtT        GT = G * Exp(-dudT * lnRhoOverRhoT) 'shear modulus at temperature        storedValues(rLoop, 5) = GT        'integrate with P at fixed T'begin finite-strain calculation'first need f = strain-like, for P change; initial guess is high:        f = 0            fguess = press / (3 * KtT)    'first order            fguess2 = 0            zeta = 0.75 * (4 - dKtdP)            coef2 = 0'Function ZBRENT'returns the root of pfunc() within the bounds fguess and fguess2, by testing pfunc(root) against tol'the actual root of the equation is f            a = fguess            b = fguess2                        f1 = (1 + 2 * a) ^ 2.5 'second order term                        f2 = (1 - 2 * zeta * a + (a ^ 2 / 6) * coef2)   'third order term                        fa = (3 * KtT * a * f1 * f2) - press  'difference betw P and P predicted by strain                        f1 = (1 + 2 * b) ^ 2.5 'second order term                        f2 = (1 - 2 * zeta * b + (b ^ 2 / 6) * coef2)  'third order term                        fb = (3 * KtT * b * f1 * f2) - press  'difference betw P and P predicted by strain            If fb * fa > 0 Then                temp = Application.InputBox("Root must be bracketed for ZBRENT", , , , , , , 1)                GoTo 1234 'ZBRENT end            End If            fc = fb            For iter = 1 To 100                If fb * fc > 0 Then                    c = a                    fc = fa                    d = b - a                    e = d                End If                If Abs(fc) < Abs(fb) Then                    a = b                    b = c                    c = a                    fa = fb                    fb = fc                    fc = fa                End If                tol1 = 2 * 3e-08# * Abs(b) + 0.5 * 1e-08#           '0.00000001 = tol                xm = 0.5 * (c - b)                If (Abs(xm) <= tol1) Or (fb = 0) Then                    zbrent = b                    GoTo 1234 'ZBRENT end                End If                If (Abs(e) >= tol1) And (Abs(fa) > Abs(fb)) Then                    s = fb / fa                    If (a = c) Then                        pzbrent = 2 * xm * s                        q = 1 - s                    Else                        q = fa / fc                        r = fb / fc                        pzbrent = s * (2 * xm * q * (q - r) - (b - a) * (r - 1))                        q = (q - 1) * (r - 1) * (s - 1)                    End If                    If pzbrent > 0 Then q = -q                    pzbrent = Abs(pzbrent)                    min1 = 3 * xm * q - Abs(tol1 * q)                    min2 = Abs(e * q)                    If min1 < min2 Then                        min = min1                    Else                        min = min2                    End If                    If 2 * pzbrent < min Then                        e = d                        d = pzbrent / q                    Else                        d = xm                        e = d                    End If                Else                    d = xm                    e = d                End If                a = b                fa = fb                If Abs(d) > tol1 Then                    b = b + d                Else                    If xm >= 0 Then                        b = b + Abs(tol1)                    Else                        b = b - Abs(tol1)                    End If                End If                f1 = (1 + 2 * b) ^ 2.5 'second order term                f2 = (1 - 2 * zeta * b + (b ^ 2 / 6) * coef2) 'third order term                fb = (3 * KtT * b * f1 * f2) - press  'difference betw P and P predicted by strain            Next iter            temp = Application.InputBox("WARNING: ZBRENT exceeded maximum iterations", , , , , , , 1)            zbrent = b1234         'End ZBRENT Function                ff = zbrent        f1 = (1 + 2 * ff) ^ 2.5  'first part of eq 18 of B&H        f2 = (1 - 2 * zeta * ff + (ff ^ 2 / 6) * coef2) 'middle part of eq 18 of B&H        tolout = (3 * KtT * ff * f1 * f2) - press   'difference betw P and P predicted by strain'end of finite strain calculation                dvol = (1 + 2 * ff) ^ 1.5        rhoPT = rhoT * dvol 'density at pressure and temperature        storedValues(rLoop, 11) = rhoPT    'rho(P,T)        storedValues(rLoop, 6) = ff    'rho(P,T)        ffac = (1 + 2 * ff) ^ 2.5   'eq 20&21 of Bina and Helffrich        KtPT = KtT * ffac * (1 - ff * (5 - 3 * dKtdP))    'eq 20 of B&H w/o K'' term; isothermal bulk modulus  at pressure and temperature        storedValues(rLoop, 7) = KtPT  'Kt(P,T)        GPT = GT * ffac * (1 - ff * (5 - 3 * dudP * KtT / GT)) 'eq 21 of B&H; shear modulus  at pressure and temperature       storedValues(rLoop, 10) = GPT   'G(P,T)        alphaPT = alphaT * dvol ^ (-deltaT) 'thermal expansivity at pressure and temperature        storedValues(rLoop, 8) = alphaPT   'alpha(P,T)        KsPT = KtPT * (1 + (temperature + 273) * gth * alphaPT) 'Ks(P,T); isentropic bulk modulus at pressure and temperature        storedValues(rLoop, 9) = KsPT        storedValues(rLoop, 12) = Sqr(KsPT / rhoPT) * 0.001   'Vphi or bulk velocity        VpPT = Sqr((KsPT + (4 / 3) * GPT) / rhoPT) * 0.001  'Vp at pressure and temperature        storedValues(rLoop, 13) = VpPT        VsPT = Sqr(GPT / rhoPT) * 0.001 'Vs at pressure and temperature        storedValues(rLoop, 14) = VsPT        Poissons = (3 * KsPT - 2 * GPT) / 2 / (3 * KsPT + GPT)  'Poisson's ratio at pressure and temperature        storedValues(rLoop, 15) = Poissons    Next rLoop'move calculated mineral values to sheet'    Sheets("minerals").Select    Sheets("minerals").Cells(1, 2) = press / 1000000000    Sheets("minerals").Cells(2, 2) = temperature    For rLoop = 1 To noPhases        Sheets("minerals").Cells(labelrow + rLoop, 1) = mineralname(rLoop)        For cloop = 2 To 14            Sheets("minerals").Cells(labelrow + rLoop, cloop) = storedValues(rLoop, cloop)        Next cloop    Next rLoop'calculate rock aggregate properties'Debug.Print "calculate rock aggregate properties"    rkRho = 0    rkKVoigt = 0    rkKReuss = 0    rkGVoigt = 0    rkGReuss = 0    rkH2O = 0'read mineral modes'    Sheets("rocks").Select    modeTotal = 0    For rLoop = 1 To noPhases        Sheets("rocks").Cells(volRow + rLoop, 1) = mineralname(rLoop)        rKModes(rLoop) = Sheets("rocks").Cells(volRow + rLoop, rockCLoop)        modeTotal = modeTotal + rKModes(rLoop)    Next rLoop'recalculate mineral modes to 100%    For rLoop = 1 To noPhases        rKModes(rLoop) = rKModes(rLoop) * (1 / modeTotal)    Next rLoop        KsPTmax = 0    KsPTmin = 1e+30#    GPTmax = 0    GPTmin = 1e+30#'calculate rho, etc.    For rLoop = 1 To noPhases        If (rKModes(rLoop) > 0) Then'remember max and min  moduli            KsPT = storedValues(rLoop, 9)            GPT = storedValues(rLoop, 10)            If KsPT > KsPTmax Then KsPTmax = KsPT            If KsPT < KsPTmin Then KsPTmin = KsPT            If GPT > GPTmax Then GPTmax = GPT            If GPT < GPTmin Then GPTmin = GPT                    rkRho = rkRho + storedValues(rLoop, 11) * rKModes(rLoop)            rkKVoigt = rkKVoigt + storedValues(rLoop, 9) * rKModes(rLoop)            rkKReuss = rkKReuss + rKModes(rLoop) / storedValues(rLoop, 9)            rkGVoigt = rkGVoigt + storedValues(rLoop, 10) * rKModes(rLoop)            rkGReuss = rkGReuss + rKModes(rLoop) / storedValues(rLoop, 10)            rkH2O = rkH2O + storedValues(rLoop, 16) * rKModes(rLoop)        End If    Next rLoop'calculate Hashin-Shtrikman bounds'Debug.Print "calculate Hashin-Shtrikman bounds"    alpha1 = -3 / ((3 * KsPTmin) + (4 * GPTmin))   'checked    alphan = -3 / ((3 * KsPTmax) + (4 * GPTmax))   'checked    beta1 = alpha1 * (KsPTmin + 2 * GPTmin) / 5 / GPTmin  'checked    betan = alphan * (KsPTmax + 2 * GPTmax) / 5 / GPTmax  'checked'calculate A1, An, B1, Bn coefficients    A1 = 0    An = 0    B1 = 0    Bn = 0    For rLoop = 1 To noPhases        If (rKModes(rLoop) > 0) Then            aA1 = storedValues(rLoop, 9) - KsPTmin  'storedValues(rLoop, 9) holds Ks values; checked            If aA1 <> 0 Then A1 = A1 + rKModes(rLoop) / ((1 / aA1) - alpha1) 'for lower HS bound on K            bB1 = storedValues(rLoop, 10) - GPTmin            If bB1 <> 0 Then B1 = B1 + rKModes(rLoop) / (0.5 / bB1 - beta1)  'for lower HS bound on G            aAn = storedValues(rLoop, 9) - KsPTmax            If aAn <> 0 Then An = An + rKModes(rLoop) / ((1 / aAn) - alphan) 'for upper HS bound on K            bBn = storedValues(rLoop, 10) - GPTmax            If bBn <> 0 Then Bn = Bn + rKModes(rLoop) / (0.5 / bBn - betan) 'for upper HS bound on G        End If    Next rLoop    kHSMin = KsPTmin + A1 / (1 + alpha1 * A1)   'lower H-S bound on K    kHSMax = KsPTmax + An / (1 + alphan * An)   'upper H-S bound on K    GHSMin = GPTmin + 0.5 * B1 / (1 + beta1 * B1)   'lower H-S bound on G    GHSMax = GPTmax + 0.5 * Bn / (1 + betan * Bn)   'upper H-S bound on G    rkKHS = (kHSMin + kHSMax) / 2  'H-S average for K, Pa    rkGHS = (GHSMin + GHSMax) / 2  'H-S average for G, Pa        rkVpHS = Sqr((rkKHS + (4 / 3) * rkGHS) / rkRho) * 0.001    'H-S Vp    rkVsHS = Sqr(rkGHS / rkRho) * 0.001                               'H-S Vs    rkVpMax = Sqr((kHSMax + (4 / 3) * GHSMax) / rkRho) * 0.001 'HS bound P    rkVpMin = Sqr((kHSMin + (4 / 3) * GHSMin) / rkRho) * 0.001 'HS bound P    rkVsMax = Sqr(GHSMax / rkRho) * 0.001                                 'HS bound S    rkVsMin = Sqr(GHSMin / rkRho) * 0.001                                'HS bound S    rkPoissonsHS = (3 * rkKHS - 2 * rkGHS) * 0.5 / (3 * rkKHS + rkGHS)    'H-S Poissons ratio'Voigt-Reuss bounds    rkKReuss = 1 / rkKReuss    rkGReuss = 1 / rkGReuss    rkVpVoigt = Sqr((rkKVoigt + (4 / 3) * rkGVoigt) / rkRho) * 0.001   'Voigt bound P    rkVpReuss = Sqr((rkKReuss + (4 / 3) * rkGReuss) / rkRho) * 0.001   'Reuss bound P    rkVsVoigt = Sqr(rkGVoigt / rkRho) * 0.001   'Voigt bound S    rkVsReuss = Sqr(rkGReuss / rkRho) * 0.001   'Voigt bound S    rkVpVR = (rkVpVoigt + rkVpReuss) / 2    rkVsVR = (rkVsVoigt + rkVsReuss) / 2    rkKVR = (rkKVoigt + rkKReuss) / 2    rkGVR = (rkGVoigt + rkGReuss) / 2        Sheets("rocks").Cells(noPhases + 7 + 3, rockCLoop) = rkH2O    Sheets("rocks").Cells(noPhases + 7 + 4, rockCLoop) = rkRho / 1000    Sheets("rocks").Cells(noPhases + 7 + 5, rockCLoop) = rkVpHS    Sheets("rocks").Cells(noPhases + 7 + 6, rockCLoop) = rkVsHS    Sheets("rocks").Cells(noPhases + 7 + 7, rockCLoop) = rkKHS / 1000000000#    Sheets("rocks").Cells(noPhases + 7 + 8, rockCLoop) = rkGHS / 1000000000#    Sheets("rocks").Cells(noPhases + 7 + 9, rockCLoop) = rkPoissonsHS    Sheets("rocks").Cells(noPhases + 7 + 18, rockCLoop) = rkVpMax    Sheets("rocks").Cells(noPhases + 7 + 19, rockCLoop) = rkVpMin    Sheets("rocks").Cells(noPhases + 7 + 20, rockCLoop) = rkVpVoigt    Sheets("rocks").Cells(noPhases + 7 + 21, rockCLoop) = rkVpReuss    Sheets("rocks").Cells(noPhases + 7 + 22, rockCLoop) = rkVpVR    Sheets("rocks").Cells(noPhases + 7 + 23, rockCLoop) = rkVsMax    Sheets("rocks").Cells(noPhases + 7 + 24, rockCLoop) = rkVsMin    Sheets("rocks").Cells(noPhases + 7 + 25, rockCLoop) = rkVsVoigt    Sheets("rocks").Cells(noPhases + 7 + 26, rockCLoop) = rkVsReuss    Sheets("rocks").Cells(noPhases + 7 + 27, rockCLoop) = rkVsVR    Sheets("rocks").Cells(noPhases + 7 + 28, rockCLoop) = kHSMax / 1000000000#    Sheets("rocks").Cells(noPhases + 7 + 29, rockCLoop) = kHSMin / 1000000000#    Sheets("rocks").Cells(noPhases + 7 + 30, rockCLoop) = rkKVoigt / 1000000000#    Sheets("rocks").Cells(noPhases + 7 + 31, rockCLoop) = rkKReuss / 1000000000#    Sheets("rocks").Cells(noPhases + 7 + 32, rockCLoop) = rkKVR / 1000000000#    Sheets("rocks").Cells(noPhases + 7 + 33, rockCLoop) = GHSMax / 1000000000    Sheets("rocks").Cells(noPhases + 7 + 34, rockCLoop) = GHSMin / 1000000000    Sheets("rocks").Cells(noPhases + 7 + 35, rockCLoop) = rkGVoigt / 1000000000#    Sheets("rocks").Cells(noPhases + 7 + 36, rockCLoop) = rkGReuss / 1000000000#    Sheets("rocks").Cells(noPhases + 7 + 37, rockCLoop) = rkGVR / 1000000000#555  'end of loop for this P/T/RockNext rockCLoop666 'end of program'Application.Calculation = xlCalculationAutomaticApplication.StatusBar = "Calculation finished."End Sub